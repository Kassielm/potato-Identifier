#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar delegates TensorFlow Lite
"""

import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_delegate_files():
    """Verificar se arquivos de delegate existem"""
    delegate_paths = [
        '/usr/lib/libvx_delegate.so',
        '/usr/local/lib/libvx_delegate.so',
        '/usr/lib/aarch64-linux-gnu/libvx_delegate.so',
        '/usr/lib/arm-linux-gnueabihf/libvx_delegate.so'
    ]
    
    logger.info("üîç Verificando arquivos de delegate...")
    found = False
    
    for path in delegate_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ Encontrado: {path}")
            found = True
        else:
            logger.info(f"‚ùå N√£o encontrado: {path}")
    
    return found

def test_tflite_import():
    """Testar importa√ß√£o do TensorFlow Lite"""
    try:
        import tflite_runtime.interpreter as tflite
        logger.info("‚úÖ tflite_runtime importado com sucesso")
        return tflite, True
    except ImportError:
        try:
            import tensorflow as tf
            logger.info("‚úÖ tensorflow importado com sucesso")
            return tf.lite, False
        except ImportError:
            logger.error("‚ùå Nenhuma biblioteca TensorFlow dispon√≠vel")
            return None, False

def test_delegate_loading(tflite_module, using_runtime):
    """Testar carregamento de delegate"""
    delegate_paths = [
        '/usr/lib/libvx_delegate.so',
        '/usr/local/lib/libvx_delegate.so'
    ]
    
    for delegate_path in delegate_paths:
        if os.path.exists(delegate_path):
            try:
                logger.info(f"üß™ Testando carregamento: {delegate_path}")
                
                if using_runtime:
                    delegate = tflite_module.load_delegate(delegate_path)
                else:
                    delegate = tflite_module.experimental.load_delegate(delegate_path)
                    
                logger.info(f"‚úÖ Delegate carregado: {delegate_path}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao carregar {delegate_path}: {e}")
                
    return False

def check_npu_device():
    """Verificar se dispositivo NPU est√° dispon√≠vel"""
    npu_paths = [
        '/dev/galcore',
        '/sys/class/misc/galcore',
        '/proc/device-tree/soc@0/npu@38500000'
    ]
    
    logger.info("üîç Verificando dispositivos NPU...")
    found = False
    
    for path in npu_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ NPU device encontrado: {path}")
            found = True
        else:
            logger.info(f"‚ùå NPU device n√£o encontrado: {path}")
    
    return found

def main():
    logger.info("========================================")
    logger.info("    Diagn√≥stico de Delegates TFLite")
    logger.info("========================================")
    
    # 1. Verificar arquivos de delegate
    delegate_files_found = check_delegate_files()
    
    # 2. Testar importa√ß√£o TensorFlow Lite
    tflite_module, using_runtime = test_tflite_import()
    
    if not tflite_module:
        logger.error("‚ùå N√£o √© poss√≠vel continuar sem TensorFlow Lite")
        return
    
    # 3. Testar carregamento de delegate
    if delegate_files_found:
        delegate_loaded = test_delegate_loading(tflite_module, using_runtime)
    else:
        delegate_loaded = False
    
    # 4. Verificar dispositivos NPU
    npu_device_found = check_npu_device()
    
    # 5. Resumo
    logger.info("\n========================================")
    logger.info("             RESUMO")
    logger.info("========================================")
    logger.info(f"Arquivos de delegate encontrados: {'‚úÖ' if delegate_files_found else '‚ùå'}")
    logger.info(f"Delegate carregado com sucesso: {'‚úÖ' if delegate_loaded else '‚ùå'}")
    logger.info(f"Dispositivo NPU encontrado: {'‚úÖ' if npu_device_found else '‚ùå'}")
    
    if delegate_loaded and npu_device_found:
        logger.info("üéâ Sistema pronto para usar NPU!")
    elif delegate_files_found and not delegate_loaded:
        logger.warning("‚ö†Ô∏è Delegate dispon√≠vel mas n√£o carrega - poss√≠vel incompatibilidade")
    else:
        logger.info("‚ÑπÔ∏è Sistema funcionar√° em modo CPU")

if __name__ == "__main__":
    main()
